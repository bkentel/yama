<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="include\math.hpp" line="46" id="passedByValue" severity="style" msg="Parameter &apos;value&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="193" id="passedByValue" severity="style" msg="Parameter &apos;lhs&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="203" id="passedByValue" severity="style" msg="Parameter &apos;lhs&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="213" id="passedByValue" severity="style" msg="Parameter &apos;lhs&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="223" id="passedByValue" severity="style" msg="Parameter &apos;lhs&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="231" id="passedByValue" severity="style" msg="Parameter &apos;range&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="248" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="248" id="passedByValue" severity="style" msg="Parameter &apos;q&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="253" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="253" id="passedByValue" severity="style" msg="Parameter &apos;q&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="278" id="passedByValue" severity="style" msg="Parameter &apos;p0&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="278" id="passedByValue" severity="style" msg="Parameter &apos;p1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="283" id="passedByValue" severity="style" msg="Parameter &apos;v0&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="283" id="passedByValue" severity="style" msg="Parameter &apos;v1&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="288" id="passedByValue" severity="style" msg="Parameter &apos;v&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="293" id="passedByValue" severity="style" msg="Parameter &apos;v&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="327" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="336" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="337" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="338" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="339" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="346" id="passedByValue" severity="style" msg="Parameter &apos;p&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="356" id="passedByValue" severity="style" msg="Parameter &apos;a&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="356" id="passedByValue" severity="style" msg="Parameter &apos;b&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="364" id="passedByValue" severity="style" msg="Parameter &apos;a&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\math.hpp" line="364" id="passedByValue" severity="style" msg="Parameter &apos;b&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\random.hpp" line="16" id="passedByValue" severity="style" msg="Parameter &apos;range&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include\renderer.hpp" line="10" id="unusedStructMember" severity="style" msg="struct or union member &apos;rect::x0&apos; is never used." />
    <error file="include\renderer.hpp" line="10" id="unusedStructMember" severity="style" msg="struct or union member &apos;rect::y0&apos; is never used." />
    <error file="include\renderer.hpp" line="10" id="unusedStructMember" severity="style" msg="struct or union member &apos;rect::x1&apos; is never used." />
    <error file="include\renderer.hpp" line="10" id="unusedStructMember" severity="style" msg="struct or union member &apos;rect::y1&apos; is never used." />
    <error file="include\renderer.hpp" line="14" id="unusedStructMember" severity="style" msg="struct or union member &apos;color::r&apos; is never used." />
    <error file="include\renderer.hpp" line="14" id="unusedStructMember" severity="style" msg="struct or union member &apos;color::g&apos; is never used." />
    <error file="include\renderer.hpp" line="14" id="unusedStructMember" severity="style" msg="struct or union member &apos;color::b&apos; is never used." />
    <error file="include\renderer.hpp" line="14" id="unusedStructMember" severity="style" msg="struct or union member &apos;color::a&apos; is never used." />
    <error file="include\renderer.hpp" line="18" id="unusedStructMember" severity="style" msg="struct or union member &apos;texture_rect::x0&apos; is never used." />
    <error file="include\renderer.hpp" line="18" id="unusedStructMember" severity="style" msg="struct or union member &apos;texture_rect::y0&apos; is never used." />
    <error file="include\renderer.hpp" line="18" id="unusedStructMember" severity="style" msg="struct or union member &apos;texture_rect::x1&apos; is never used." />
    <error file="include\renderer.hpp" line="18" id="unusedStructMember" severity="style" msg="struct or union member &apos;texture_rect::y1&apos; is never used." />
    <error file="src\bsp_layout.cpp" line="18" id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." />
    <error file="test\test_bsp_layout.cpp" line="38" id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." />
    <error file="src\main.cpp" line="92" id="unusedFunction" severity="style" msg="The function &apos;SDL_main&apos; is never used." />
    <error file="include\direction.hpp" line="52" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::e&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="27" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::n&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="32" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::ne&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="22" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::nw&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="42" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::s&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="47" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::se&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="37" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::sw&gt;&apos; is never used." />
    <error file="include\direction.hpp" line="57" id="unusedFunction" severity="style" msg="The function &apos;relative_to&lt;direction::w&gt;&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
